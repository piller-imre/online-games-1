 
 
 
\Section{Alkalmazás logika}

A komponenseket ugyan megterveztük, de rengeteg kérdés merül fel azzal kapcsolatban, hogy hogyan fognak ezek a komponensek együtt működni. Hogyan szinkronizáljuk a játék menetét, hogy mindkét játékos (lehetőleg) valós időben lássa a másik lépéseit? Szinkronizáljuk a böngészők eseményeit? Egyáltalán milyen feladatok merülnek fel, amikre a tervezés legelején nem gondolna az ember? Nézzük sorban!

\SubSection{A backend és a frontend kapcsolata}
Az első és legfontosabb kérdés, hogy hogyan fogja látni az egyik böngésző, hogy mi történik a másikban, pl. ha lép a játékos, hogyan jut át az információ? Ahogy egy pincér egy jó étteremben, a szerver (pincér) kiszolgál, a kliens pedig rendel. Tehát minden eseményt vagy kérést a klienst küld el a szervernek, ill. ha a szerverhez befut egy információ, a szerver nem tolakodik a böngészőhöz, hogy átadja az információt, sőt azt sem tudja, hogy a frontendnek szüksége van rá. Ezért az alkalmazásban minden kommunikációt a frontend kezdeményez.

\SubSection{Játék indítása}
A játék elindításához el kell navigálnunk a játék indítása oldalra. Belépéskor elindul egy időzített funkció, ami 5 másodpercenként ellenőrzi, hogy a játékosnak van -e már aktív játékmenete. Minden ilyen kéréskor a szerver ellenőrzi az adatbázisban, hogy van -e olyan aktív meccs, amelyikben a játékos szerepel. Ez a módszer két okból is előnyös lesz.

Az egyik, hogy előfordulhat, hogy a játékos akarva vagy akaratlanul (internet kimaradás, ügyetlen kattintás, stb.) kilép a játékból. Így, ha tovább szeretne játszani, visszatérhet a játékba, ha pedig nem, akkor is feladni a játékot, mint szó nélkül ott hagyni az ellenfelet, aki a lépésre vár. Természetesen a játéknak érzékelnie kell a tartós távol maradást is. Ebben az esetben a meccsnek vége lesz, és az ellenfél nyer, mintha feladás történt volna.

A másik előny, hogy ha egy játékos elfogad egy kihívást, a játéknak át kell navigálnia mindkét játékost a játéktérre. A kihívott részéről egyszerű a dolgunk, az elfogadáskor egy állapot és útvonal változtatással gyorsan megoldhatjuk, de a kihívót aszinkron módon kell bejuttatni az aktív meccsbe. Ez az időzített funkció ellátja ezt a feladatot is.

Tehát ha a felhasználónak már van aktív meccse, mindig átkerül a játéktérre, és ilyenkor az időzített funkció leáll, nem hívódik meg többet.

\SubSection{Inicializálás}
A meccs elindulásakor a szerver létrehoz egy aktív játékmenet objektumot, amelyet kezdő adatokkal lát el, majd elmenti az adatbázisba. Bele kerülnek a játékosok, hogy ki kezd (véletlenszerűen eldönti, hogy ki az aktív játékos), a játék típusa, a beállított szabályok, ennek megfelelően generál egy pályát, és alapértelmezettre állítja a lépést (üres sztring), a kör sorszámát (1), és 0-ra a nyertest, (nyerés esetén a játékos sorszáma kerül bele).

Elfogadott kihívás esetén ezt az objektumot kapják meg a játékosok válaszként az időzített, érdeklődő funkcióra. Így egyszerre kapnak választ, hogy játékban vannak -e, és inicializálódik a játék.

\SubSection{Játék közben}
Ebben a szakaszban a következő szinkronizációs problémákat kell megoldanunk lépés esetén:
Backend oldalon:
\begin{itemize}
	\item Ellenőrizni kell a felhasználót, van -e jogosultsága a megadott lépéshez.
	\item Ellenőrizni kell, hogy a
	\item Ellenőrizni kell, hogy a lépés érvényes -e.
	\item Ellenőrizni kell, hogy nyert -e a játékos.
	\item És a beérkezett információkat rögzíteni kell az adatbázisban.
\end{itemize}

Fontend oldalon:
\begin{itemize}
	\item A várakozó játékos lépési lehetőségét le kell tiltani, a lépő játékosét pedig engedélyezni.
	\item Frissíteni kell az időtúllépés stopperét.
	\item Fissíteni kell a pálya állását, és megjeleníteni az utolsó lépést.
	\item Ha nyert valaki, akkor befejezni a meccset.
\end{itemize}

Mindezek alapja ismét egy időzítő funkció, ezúttal azt ellenőrizzük másodpercenként, hogy lépett -e már az ellenfél. Ezt úgy tudja megmondani a szerver, hogy megnézi az adatbázisban, hogy az elmentett meccs körének száma nagyobb -e már, mint amikor ő lépett, vagy hogy lejárt-e a megengedett idő az ellenfél lépésére. Ha az ellenfél még nem lépett, újra meghívódik, ha lépett, vagy az ideje lejárt, az időzítő leáll, és a visszakapott adatokból kinyerjük a meccs frissítéséhez szükséges információkat. Ezek alapján el tudja végezni a fent említett funkciókat.

\SubSection{Játék vége}
Egy meccset több féle képpen be lehet fejezni, törénhet feladás, nyerés, vagy időtúllépés. A különbség, hogy mi váltja ki. Feladáskor a játékos a feladás gombra kattint, és egy kérést küld a szervernek a játék befejezésére. Ebben az esetben a játékos veszít. Nyerés esetén a szerver maga állapítja meg a játék befejezését.
Amiben mind egyezik, az az, ahogy a szerver lekezeli. Az aktív meccset szokás szerint frissíti, de ezúttal beállítja a nyertest is. Ezután létre hozza vagy frissíti a megfelelő adatokat az adatbázis lejátszott meccseket tartalmazó táblájában. Itt minden sor egy-egy felhasználó egy napi eredményeit tartalmazza egy adott játék típusban. Ezen tábla alapját állítja össze a szerver a statisztikai adatokat.







































































































